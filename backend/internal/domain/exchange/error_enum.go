// Code generated by go-enum DO NOT EDIT.
// Version: 0.9.1
// Revision: 42b1ed55945781de07471bb2db52b3f9edee19b0
// Build Date: 2025-08-02T17:25:40Z
// Built By: goreleaser

package exchange

import (
	"errors"
	"fmt"
)

const (
	// ErrInternal is a Error of type Internal.
	ErrInternal Error = iota
	// ErrNotFound is a Error of type Not_found.
	ErrNotFound
)

var ErrInvalidError = errors.New("not a valid Error")

const _ErrorName = "internalnot_found"

var _ErrorMap = map[Error]string{
	ErrInternal: _ErrorName[0:8],
	ErrNotFound: _ErrorName[8:17],
}

// String implements the Stringer interface.
func (x Error) String() string {
	if str, ok := _ErrorMap[x]; ok {
		return str
	}
	return fmt.Sprintf("Error(%d)", x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x Error) IsValid() bool {
	_, ok := _ErrorMap[x]
	return ok
}

var _ErrorValue = map[string]Error{
	_ErrorName[0:8]:  ErrInternal,
	_ErrorName[8:17]: ErrNotFound,
}

// ParseError attempts to convert a string to a Error.
func ParseError(name string) (Error, error) {
	if x, ok := _ErrorValue[name]; ok {
		return x, nil
	}
	return Error(0), fmt.Errorf("%s is %w", name, ErrInvalidError)
}
