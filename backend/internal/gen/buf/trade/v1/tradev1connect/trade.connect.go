// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: trade/v1/trade.proto

package tradev1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/kaz/scaffold/backend/internal/gen/buf/trade/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// TradeServiceName is the fully-qualified name of the TradeService service.
	TradeServiceName = "trade.v1.TradeService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// TradeServiceGetPriceProcedure is the fully-qualified name of the TradeService's GetPrice RPC.
	TradeServiceGetPriceProcedure = "/trade.v1.TradeService/GetPrice"
)

// TradeServiceClient is a client for the trade.v1.TradeService service.
type TradeServiceClient interface {
	GetPrice(context.Context, *connect.Request[v1.GetPriceRequest]) (*connect.Response[v1.GetPriceResponse], error)
}

// NewTradeServiceClient constructs a client for the trade.v1.TradeService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewTradeServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) TradeServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	tradeServiceMethods := v1.File_trade_v1_trade_proto.Services().ByName("TradeService").Methods()
	return &tradeServiceClient{
		getPrice: connect.NewClient[v1.GetPriceRequest, v1.GetPriceResponse](
			httpClient,
			baseURL+TradeServiceGetPriceProcedure,
			connect.WithSchema(tradeServiceMethods.ByName("GetPrice")),
			connect.WithClientOptions(opts...),
		),
	}
}

// tradeServiceClient implements TradeServiceClient.
type tradeServiceClient struct {
	getPrice *connect.Client[v1.GetPriceRequest, v1.GetPriceResponse]
}

// GetPrice calls trade.v1.TradeService.GetPrice.
func (c *tradeServiceClient) GetPrice(ctx context.Context, req *connect.Request[v1.GetPriceRequest]) (*connect.Response[v1.GetPriceResponse], error) {
	return c.getPrice.CallUnary(ctx, req)
}

// TradeServiceHandler is an implementation of the trade.v1.TradeService service.
type TradeServiceHandler interface {
	GetPrice(context.Context, *connect.Request[v1.GetPriceRequest]) (*connect.Response[v1.GetPriceResponse], error)
}

// NewTradeServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewTradeServiceHandler(svc TradeServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	tradeServiceMethods := v1.File_trade_v1_trade_proto.Services().ByName("TradeService").Methods()
	tradeServiceGetPriceHandler := connect.NewUnaryHandler(
		TradeServiceGetPriceProcedure,
		svc.GetPrice,
		connect.WithSchema(tradeServiceMethods.ByName("GetPrice")),
		connect.WithHandlerOptions(opts...),
	)
	return "/trade.v1.TradeService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case TradeServiceGetPriceProcedure:
			tradeServiceGetPriceHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedTradeServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedTradeServiceHandler struct{}

func (UnimplementedTradeServiceHandler) GetPrice(context.Context, *connect.Request[v1.GetPriceRequest]) (*connect.Response[v1.GetPriceResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("trade.v1.TradeService.GetPrice is not implemented"))
}
